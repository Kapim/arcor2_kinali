# coding: utf-8

"""
    Pick Master Web API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0-alpha.8
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SimaticApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_actual_position(self, engine_number, **kwargs):  # noqa: E501
        """Gets actual position of simatic engine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actual_position(engine_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine_number: Number of simatic engine (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_actual_position_with_http_info(engine_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_actual_position_with_http_info(engine_number, **kwargs)  # noqa: E501
            return data

    def get_actual_position_with_http_info(self, engine_number, **kwargs):  # noqa: E501
        """Gets actual position of simatic engine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_actual_position_with_http_info(engine_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine_number: Number of simatic engine (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actual_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine_number' is set
        if ('engine_number' not in params or
                params['engine_number'] is None):
            raise ValueError("Missing the required parameter `engine_number` when calling `get_actual_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'engine_number' in params:
            query_params.append(('engineNumber', params['engine_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/position', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_io(self, name, **kwargs):  # noqa: E501
        """Gets analog/digital input/output value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_io(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of IO with format {A/D}{I/O}_{byte number} (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_io_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_io_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_io_with_http_info(self, name, **kwargs):  # noqa: E501
        """Gets analog/digital input/output value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_io_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of IO with format {A/D}{I/O}_{byte number} (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_io" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_io`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/io', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_home(self, engine, **kwargs):  # noqa: E501
        """Move engine to home position, need after start simatic.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_home(engine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine: Number of engine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_home_with_http_info(engine, **kwargs)  # noqa: E501
        else:
            (data) = self.move_home_with_http_info(engine, **kwargs)  # noqa: E501
            return data

    def move_home_with_http_info(self, engine, **kwargs):  # noqa: E501
        """Move engine to home position, need after start simatic.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_home_with_http_info(engine, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine: Number of engine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_home" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine' is set
        if ('engine' not in params or
                params['engine'] is None):
            raise ValueError("Missing the required parameter `engine` when calling `move_home`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'engine' in params:
            query_params.append(('engine', params['engine']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/move_home', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_to_position(self, engine, position, speed, position_type, **kwargs):  # noqa: E501
        """Move engine to absolute or relative position with specific speed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_to_position(engine, position, speed, position_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine: Number of engine (required)
        :param int position: Position in micrometre (required)
        :param int speed: Speed in mm/s (required)
        :param str position_type: Absolute or relative (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_to_position_with_http_info(engine, position, speed, position_type, **kwargs)  # noqa: E501
        else:
            (data) = self.move_to_position_with_http_info(engine, position, speed, position_type, **kwargs)  # noqa: E501
            return data

    def move_to_position_with_http_info(self, engine, position, speed, position_type, **kwargs):  # noqa: E501
        """Move engine to absolute or relative position with specific speed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_to_position_with_http_info(engine, position, speed, position_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int engine: Number of engine (required)
        :param int position: Position in micrometre (required)
        :param int speed: Speed in mm/s (required)
        :param str position_type: Absolute or relative (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['engine', 'position', 'speed', 'position_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_to_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'engine' is set
        if ('engine' not in params or
                params['engine'] is None):
            raise ValueError("Missing the required parameter `engine` when calling `move_to_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `move_to_position`")  # noqa: E501
        # verify the required parameter 'speed' is set
        if ('speed' not in params or
                params['speed'] is None):
            raise ValueError("Missing the required parameter `speed` when calling `move_to_position`")  # noqa: E501
        # verify the required parameter 'position_type' is set
        if ('position_type' not in params or
                params['position_type'] is None):
            raise ValueError("Missing the required parameter `position_type` when calling `move_to_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'engine' in params:
            query_params.append(('engine', params['engine']))  # noqa: E501
        if 'position' in params:
            query_params.append(('position', params['position']))  # noqa: E501
        if 'speed' in params:
            query_params.append(('speed', params['speed']))  # noqa: E501
        if 'position_type' in params:
            query_params.append(('positionType', params['position_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/position', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_io(self, name, **kwargs):  # noqa: E501
        """Sets analog/digital output value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_io(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of IO with format {A/D}{I/O}_{byte number} (required)
        :param float output: Value set to IO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_io_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.set_io_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def set_io_with_http_info(self, name, **kwargs):  # noqa: E501
        """Sets analog/digital output value.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_io_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Name of IO with format {A/D}{I/O}_{byte number} (required)
        :param float output: Value set to IO
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'output']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_io" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_io`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'output' in params:
            query_params.append(('output', params['output']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/io', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_machine(self, number, **kwargs):  # noqa: E501
        """Stop engine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_machine(number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number: Number of engine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_machine_with_http_info(number, **kwargs)  # noqa: E501
        else:
            (data) = self.stop_machine_with_http_info(number, **kwargs)  # noqa: E501
            return data

    def stop_machine_with_http_info(self, number, **kwargs):  # noqa: E501
        """Stop engine.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_machine_with_http_info(number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int number: Number of engine (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `stop_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'number' in params:
            query_params.append(('number', params['number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/simatic/stop_machine', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
